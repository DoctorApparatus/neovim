return {
	"hedyhli/outline.nvim",
	config = function()
		require("outline").setup({
			{
				outline_window = {
					position = "right",
					split_command = nil,
					width = 15,
					relative_width = true,
					auto_close = false,
					auto_jump = false,
					jump_highlight_duration = 300,
					center_on_jump = true,
					show_numbers = false,
					show_relative_numbers = false,
					wrap = false,
					show_cursorline = true,
					hide_cursor = false,
					focus_on_open = true,
					winhl = "OutlineDetails:Comment,OutlineLineno:LineNr",
				},
				outline_items = {
					show_symbol_details = true,
					show_symbol_lineno = false,
					highlight_hovered_item = true,
					auto_set_cursor = true,
					auto_update_events = {
						follow = { "CursorMoved" },
						items = { "InsertLeave", "WinEnter", "BufEnter", "BufWinEnter", "TabEnter", "BufWritePost" },
					},
				},
				guides = {
					enabled = true,
					markers = {

						bottom = "└",
						middle = "├",
						vertical = "│",
					},
				},
				symbol_folding = {

					autofold_depth = nil,

					auto_unfold = {

						hovered = true,

						only = true,
					},
					markers = { "", "" },
				},
				preview_window = {
					auto_preview = false,
					open_hover_on_preview = false,
					width = 50,
					min_width = 50,
					relative_width = true,
					border = "single",
					winhl = "",
					winblend = 0,
				},
				keymaps = {
					show_help = "?",
					close = { "<Esc>", "q" },
					goto_location = "<Cr>",
					peek_location = "o",
					goto_and_close = "<S-Cr>",
					restore_location = "<C-g>",
					hover_symbol = "<C-space>",
					toggle_preview = "K",
					rename_symbol = "r",
					code_actions = "a",
					fold = "h",
					unfold = "l",
					fold_toggle = "<Tab>",
					fold_toggle_all = "<S-Tab>",
					fold_all = "W",
					unfold_all = "E",
					fold_reset = "R",
					down_and_jump = "<C-j>",
					up_and_jump = "<C-k>",
				},
				providers = {
					priority = { "lsp", "coc", "markdown" },
					lsp = {

						blacklist_clients = {},
					},
				},
				symbols = {
					filter = nil,
					icon_fetcher = nil,
					icon_source = nil,
					icons = {
						File = { icon = "󰈔", hl = "@text.uri" },
						Module = { icon = "󰆧", hl = "@namespace" },
						Namespace = { icon = "󰅪", hl = "@namespace" },
						Package = { icon = "󰏗", hl = "@namespace" },
						Class = { icon = "𝓒", hl = "@type" },
						Method = { icon = "ƒ", hl = "@method" },
						Property = { icon = "", hl = "@method" },
						Field = { icon = "󰆨", hl = "@field" },
						Constructor = { icon = "", hl = "@constructor" },
						Enum = { icon = "ℰ", hl = "@type" },
						Interface = { icon = "󰜰", hl = "@type" },
						Function = { icon = "", hl = "@function" },
						Variable = { icon = "", hl = "@constant" },
						Constant = { icon = "", hl = "@constant" },
						String = { icon = "𝓐", hl = "@string" },
						Number = { icon = "#", hl = "@number" },
						Boolean = { icon = "⊨", hl = "@boolean" },
						Array = { icon = "󰅪", hl = "@constant" },
						Object = { icon = "⦿", hl = "@type" },
						Key = { icon = "🔐", hl = "@type" },
						Null = { icon = "NULL", hl = "@type" },
						EnumMember = { icon = "", hl = "@field" },
						Struct = { icon = "𝓢", hl = "@type" },
						Event = { icon = "🗲", hl = "@type" },
						Operator = { icon = "+", hl = "@operator" },
						TypeParameter = { icon = "𝙏", hl = "@parameter" },
						Component = { icon = "󰅴", hl = "@function" },
						Fragment = { icon = "󰅴", hl = "@constant" },
						TypeAlias = { icon = " ", hl = "@type" },
						Parameter = { icon = " ", hl = "@parameter" },
						StaticMethod = { icon = " ", hl = "@function" },
						Macro = { icon = " ", hl = "@macro" },
					},
				},
			},
		})
	end,
}
